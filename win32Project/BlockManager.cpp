#include "Block.h"
#include "BlockManager.h"



BlockManager::BlockManager()
{
	
	// Action Stage  정답 4개/오답 4개 순서
	// #1 걷기

	block[0] = new Block("캐릭터의 아래가 땅인지 확인", "캐릭터의 아래에 캐릭터를 지탱할 수 있는 블럭이 있는지 확인함");
	block[1] = new Block("키보드의 방향키가 눌러졌는지 확인", "키보드의 방향키가 계속 눌러져 있는 상태라면 해당 방향으로 이동함");
	block[2] = new Block("캐릭터의 위치를 움직임", "캐릭터 오브젝터의 위치를 변경시킨다.");
	block[3] = new Block("캐릭터의 방향을 변경", "캐릭터가 바라보는 방향을 반대 방향으로 변경시킨다.");
	
	block[4] = new Block("캐릭터의 아래에 아무것도 없는지 확인", "캐릭터의 아래에 무엇이라도 존재한다면 정상적으로 이동함");
	block[5] = new Block("키보드의 방향키가 눌린 후에 떼어졌는지 확인", "키보드의 방향키가 한번이라도 눌리면 해당방향으로 이동함");
	block[6] = new Block("캐릭터 이미지의 위치를 움직임", "캐릭터 오브젝트가 아닌 캐릭터의 이미지가 이동하여 정상적으로 진행되지 않음");
	block[7] = new Block("캐릭터 움직이는 방향을 변경", "캐릭터가 키가 눌린 방향과 반대방향으로 이동하게됨.");

	// #2 점프
	block[8] = new Block("키보드의 점프 키가 눌러졌는지 확인 1", "키보드의 점프 키가 한번 눌렸는지 확인함");
	block[9] = new Block("캐릭터의 위치를 움직임 2", "캐릭터를 위치를 상하로 움직임");
	block[10] = new Block("캐릭터의 위에 블럭이 있는지 확인", "캐릭터의 윗부분에 통과할 수 없는 블럭이 있는지 확인");
	block[11] = new Block("아래 버튼을 누른 후 점프 키가 눌러졌는지 확인 1", "키보드의 아래 버튼을 누른 상태에서 점프 키를 눌렀는지 확인");
	
	block[12] = new Block("키보드의 점프 키가 눌러졌는지 확인 2", "키보드의 점프 키가 눌러져 있는지 확인함");
	block[13] = new Block("캐릭터의 이미지의 위치를 움직임", "캐릭터의 이미지만 상하로 이동함");
	block[14] = new Block("캐릭터의 아래에 블럭이 있는지 확인", "");
	block[15] = new Block("아래 버튼을 누른 후 점프 키가 눌러졌는지 확인 2", "키보드의 아래 버튼을 한번이라도 눌렀다 뗀 후 점프 키를 눌렀는지 확인");


	// #3 플랫폼
	block[16] = new Block("움직이는 플랫폼 위에 캐릭터가 존재하는지 확인", "플랫폼의 범위 내에 캐릭터가 위치하고 있는지 확인한다");
	block[17] = new Block("플랫폼 위에 존재함", "캐릭터가 플랫폼 위에 위치한다");
	block[18] = new Block("캐릭터의 위치 변화시킴", "플랫폼 위에 위치한 캐릭터의 위치를 변화시킨다");
	block[19] = new Block("캐릭터 가속도 변경", " 캐릭터가 움직이는 방향이 플랫폼이 기능하는방향과 같다면 캐릭터의 움직이는 속도에+,반대 방향이라면 - 를 적용");

	block[20] = new Block("캐릭터의 기본 속력을 변화시킴", "캐릭터가 움직이는 기본 속도를 변화시켜, 플랫폼위를 벗어나더라도 이동속도가 증가한 상태로 유지됨 ");
	block[21] = new Block("캐릭터의 기본 위치를 변화시킴", "캐릭터가 플랫폼위를 벗어나더라도 플랫폼 위에 한번이라도 올라갔다면 계속 움직이게됨");
	block[22] = new Block("플랫폼이 존재함", "화면 안에 플랫폼이 존재한다");
	block[23] = new Block("", "");

	// #4 탈것 탑승
	
	block[24] = new Block("탑승 버튼이 눌러졌는지 확인", "키보드의 탑승 키가 눌러졌는지 확인합니다.");
	block[25] = new Block("캐릭터 속성변경 1", "캐릭터의 속성을 일반->탑승 한 캐릭터 로 변경시킨다.");
	block[26] = new Block("탑승물 제거", "캐릭터 주변의 탑승물 제거");
	block[27] = new Block("충돌 크기 변경", "캐릭터의 충돌판정을 처리할 때 사용되는 속성을 탑승 한 캐릭터의 크기로 변경합니다.");
	
	block[28] = new Block("주변에 탈 것이 있는지 확인","조작하는 캐릭터와 일정 거리 이내에 탑승물이 있는지 확인합니다.");
	block[29] = new Block("속성변경 하지않음", "캐릭터의 속성을 변경하지 않음.");
	block[30] = new Block("캐릭터 속성변경 2", "캐릭터의 속성을 탑승 한 캐릭터->일반 으로 변경시킨다.");
	block[31] = new Block("탑승물 생성", "캐릭터 주변에 탑승물 생성");
	
	// #8 아이템 사용 ( 무기 사용 )
	
	block[32] = new Block("아이템을 획득했는지 확인", " 캐릭터가 현재 무기 아이템을 소유하고 있는지 확인한다.");
	block[33] = new Block("아이템 사용 키를 확인", "키보드의 아이템 사용 키가 눌러졌는지 확인한다");
	block[34] = new Block("미사일 생성", "미사일이 생성되어 일정한 궤적을 따라 움직인다.");
	block[35] = new Block("미사일에 맞은 유닛이 삭제됨", " 미사일과의 거리가 일정 수준 이하일 경우, 피격됬다고 인식하고 피격체를 제거함");
	
	block[36] = new Block("캐릭터 주변에 아이템이 있는지 확인", "캐릭터가 아이템과 일정 거리 내에 있을 경우에만 아이템 사용 가능.");
	block[37] = new Block("아이템 사용 키가 눌렸는지 확인하지 않음", " 아이템 사용 키가 눌러지지 않더라도 아이템이 계속 사용된다.");
	block[38] = new Block("미사일이 제거됨", "미사일 과의 거리가 일정 수준 이하인 경우, 미사일이 제거된다 ");
	block[39] = new Block("아이템이 사라짐", "캐릭터가 소유하고 있던 아이템을 제거함. ");

	// #10 깃발- 점수변환 

	
	block[40] = new Block("캐릭터의 현재 위치 확인", "캐릭터가 깃대 뒤로 이동했는지 확인한다.");
	block[41] = new Block("캐릭터 위치 변화 제한", " 캐릭터가 키보드의 입력에 의해 움직이지 않도록 변경한다.");
	block[42] = new Block("하강 애니메이션", "깃발과 캐릭터가 함께 수직하강하는 애니메이션 효과");
	block[43] = new Block("점수 변환", "캐릭터가 깃발에 도착했을때의 높이(y 좌표상의 거리)의 일정 비율을 점수로 환산함");
	

	block[44] = new Block("깃대에 도착", "깃대 주변 일정거리 이내에 캐릭터가 있는지 확인");
	block[45] = new Block("깃발 제거", "깃발 이미지를 제거한다.");
	block[46] = new Block("키보드 입력 제한", "캐릭터를 조종하는 키보드의 입력을 중지시킨다. ");
	block[47] = new Block("키보드 입력 재개", "캐릭터를 조종하는 키보드의 입력을 작동시킨다.");
}


BlockManager::~BlockManager()
{
}

Block* BlockManager::getBlock(int blockNum)
{
	return block[blockNum];
}