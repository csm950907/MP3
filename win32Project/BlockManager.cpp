#include "Block.h"
#include "BlockManager.h"



BlockManager::BlockManager()
{
	
	// Action Stage  정답 4개/오답 4개 순서
	// #1 걷기

	block[0] = new Block("캐릭터의 아래가 땅인지 확인", "캐릭터의 아래에 캐릭터를 지탱할 수 있는 블럭이 있는지 확인함");
	block[1] = new Block("키보드의 방향키가 눌러졌는지 확인", "키보드의 방향키가 계속 눌러져 있는 상태라면 해당 방향으로 이동함");
	block[2] = new Block("캐릭터의 위치를 움직임", "캐릭터 오브젝터의 위치를 변경시킨다.");
	block[3] = new Block("캐릭터의 방향을 변경", "캐릭터가 바라보는 방향을 반대 방향으로 변경시킨다.");
	
	block[4] = new Block("캐릭터의 아래에 아무것도 없는지 확인", "캐릭터의 아래에 무엇이라도 존재한다면 정상적으로 이동함");
	block[5] = new Block("키보드의 방향키가 눌린 후에 떼어졌는지 확인", "키보드의 방향키가 한번이라도 눌리면 해당방향으로 이동함");
	block[6] = new Block("캐릭터 이미지의 위치를 움직임", "캐릭터 오브젝트가 아닌 캐릭터의 이미지가 이동하여 정상적으로 진행되지 않음");
	block[7] = new Block("캐릭터 움직이는 방향을 변경", "캐릭터가 키가 눌린 방향과 반대방향으로 이동하게됨.");

	// #2 점프
	block[8] = new Block("키보드의 점프 키가 눌러졌는지 확인 1", "키보드의 점프 키가 한번 눌렸는지 확인함");
	block[9] = new Block("캐릭터의 위치를 움직임 2", "캐릭터를 위치를 상하로 움직임");
	block[10] = new Block("캐릭터의 위에 블럭이 있는지 확인", "캐릭터의 윗부분에 통과할 수 없는 블럭이 있는지 확인");
	block[11] = new Block("아래 버튼을 누른 후 점프 키가 눌러졌는지 확인 1", "키보드의 아래 버튼을 누른 상태에서 점프 키를 눌렀는지 확인");
	
	block[12] = new Block("키보드의 점프 키가 눌러졌는지 확인 2", "키보드의 점프 키가 눌러져 있는지 확인함");
	block[13] = new Block("캐릭터의 이미지의 위치를 움직임", "캐릭터의 이미지만 상하로 이동함");
	block[14] = new Block("캐릭터의 아래에 블럭이 있는지 확인", "");
	block[15] = new Block("아래 버튼을 누른 후 점프 키가 눌러졌는지 확인 2", "키보드의 아래 버튼을 한번이라도 눌렀다 뗀 후 점프 키를 눌렀는지 확인");


	// #3 플랫폼
	block[16] = new Block("움직이는 플랫폼 위에 캐릭터가 존재하는지 확인", "플랫폼의 범위 내에 캐릭터가 위치하고 있는지 확인한다");
	block[17] = new Block("플랫폼 위에 존재함", "캐릭터가 플랫폼 위에 위치한다");
	block[18] = new Block("캐릭터의 위치 변화시킴", "플랫폼 위에 위치한 캐릭터의 위치를 변화시킨다");
	block[19] = new Block("캐릭터 가속도 변경", " 캐릭터가 움직이는 방향이 플랫폼이 기능하는방향과 같다면 캐릭터의 움직이는 속도에+,반대 방향이라면 - 를 적용");

	block[20] = new Block("캐릭터의 기본 속력을 변화시킴", "캐릭터가 움직이는 기본 속도를 변화시켜, 플랫폼위를 벗어나더라도 이동속도가 증가한 상태로 유지됨 ");
	block[21] = new Block("캐릭터의 기본 위치를 변화시킴", "캐릭터가 플랫폼위를 벗어나더라도 플랫폼 위에 한번이라도 올라갔다면 계속 움직이게됨");
	block[22] = new Block("플랫폼이 존재함", "화면 안에 플랫폼이 존재한다");
	block[23] = new Block("", "");

	// #4 탈것 탑승
	
	block[24] = new Block("탑승 버튼이 눌러졌는지 확인", "키보드의 탑승 키가 눌러졌는지 확인합니다.");
	block[25] = new Block("캐릭터 속성변경 1", "캐릭터의 속성을 일반->탑승 한 캐릭터 로 변경시킨다.");
	block[26] = new Block("탑승물 제거", "캐릭터 주변의 탑승물 제거");
	block[27] = new Block("충돌 크기 변경", "캐릭터의 충돌판정을 처리할 때 사용되는 속성을 탑승 한 캐릭터의 크기로 변경합니다.");
	
	block[28] = new Block("주변에 탈 것이 있는지 확인","조작하는 캐릭터와 일정 거리 이내에 탑승물이 있는지 확인합니다.");
	block[29] = new Block("속성변경 하지않음", "캐릭터의 속성을 변경하지 않음.");
	block[30] = new Block("캐릭터 속성변경 2", "캐릭터의 속성을 탑승 한 캐릭터->일반 으로 변경시킨다.");
	block[31] = new Block("탑승물 생성", "캐릭터 주변에 탑승물 생성");
	
	// #8 아이템 사용 ( 무기 사용 )
	
	block[32] = new Block("아이템을 획득했는지 확인", " 캐릭터가 현재 무기 아이템을 소유하고 있는지 확인한다.");
	block[33] = new Block("아이템 사용 키를 확인", "키보드의 아이템 사용 키가 눌러졌는지 확인한다");
	block[34] = new Block("미사일 생성", "미사일이 생성되어 일정한 궤적을 따라 움직인다.");
	block[35] = new Block("미사일에 맞은 유닛이 삭제됨", " 미사일과의 거리가 일정 수준 이하일 경우, 피격됬다고 인식하고 피격체를 제거함");
	
	block[36] = new Block("캐릭터 주변에 아이템이 있는지 확인", "캐릭터가 아이템과 일정 거리 내에 있을 경우에만 아이템 사용 가능.");
	block[37] = new Block("아이템 사용 키가 눌렸는지 확인하지 않음", " 아이템 사용 키가 눌러지지 않더라도 아이템이 계속 사용된다.");
	block[38] = new Block("미사일이 제거됨", "미사일 과의 거리가 일정 수준 이하인 경우, 미사일이 제거된다 ");
	block[39] = new Block("아이템이 사라짐", "캐릭터가 소유하고 있던 아이템을 제거함. ");

	// #10 깃발- 점수변환 

	
	block[40] = new Block("캐릭터의 현재 위치 확인", "캐릭터가 깃대 뒤로 이동했는지 확인한다.");
	block[41] = new Block("캐릭터 위치 변화 제한", " 캐릭터가 키보드의 입력에 의해 움직이지 않도록 변경한다.");
	block[42] = new Block("하강 애니메이션", "깃발과 캐릭터가 함께 수직하강하는 애니메이션 효과");
	block[43] = new Block("점수 변환", "캐릭터가 깃발에 도착했을때의 높이(y 좌표상의 거리)의 일정 비율을 점수로 환산함");
	

	block[44] = new Block("깃대에 도착", "깃대 주변 일정거리 이내에 캐릭터가 있는지 확인");
	block[45] = new Block("깃발 제거", "깃발 이미지를 제거한다.");
	block[46] = new Block("키보드 입력 제한", "캐릭터를 조종하는 키보드의 입력을 중지시킨다. ");
	block[47] = new Block("키보드 입력 재개", "캐릭터를 조종하는 키보드의 입력을 작동시킨다.");


	// #1 플레이어 이동 ( 상 하 좌 우 이동 )
	
	block[48] = new Block("캐릭터 생성", "캐릭터를 게임화면에 띄운다.");
	block[49] = new Block("키보드 입력", "캐릭터가 이동할 키보드의 방향키를 누른다.");
	block[50] = new Block("캐릭터 이동", "캐릭터가 입력받은 방향으로 이동한다");
	block[51] = new Block("캐릭터의 방향을 변경", "캐릭터가 이동하는 방향을 반대 방향으로 변경시킨다.");

	block[52] = new Block("캐릭터의 공격", "캐릭터가 입력받은 방향으로 탄환(공격)을 발사한다");
	block[53] = new Block("화면 이동", "게임의 배경을 입력받은 방향으로 이동한다");
	block[54] = new Block("캐릭터의 방향 확인", "캐릭터가 입력받은 방향에 아무것도 없는지 확인한다.");
	block[55] = new Block("캐릭터의 이동 제한", "캐릭터가 화면 밖으로 이동하면 움직임을 정지한다.");


	// #2 일직선 탄환 발사
	
	block[56] = new Block("키보드 입력", "캐릭터의 공격키(space)를 입력한다."); 
	block[57] = new Block("캐릭터 현재 위치 확인", "캐릭터의 현재 위치를 확인한다.");
	block[58] = new Block("탄환 생성", "비행선의 좌표에 탄환을 생성한다.");
	block[59] = new Block("탄환 이동", "설정된 총알 속도, 방향으로 탄환이 이동한다.");

	block[60] = new Block("캐릭터의 아이템 사용", "캐릭터가 가지고 있는 아이템을 사용한다.");
	block[61] = new Block("탄환 제거", "생성된 탄환이 제거된다.");
	block[62] = new Block("화면 이동", "생성된 탄환을 따라 화면이 이동한다.");
	block[63] = new Block("캐릭터 이동", "나타나야할 총알의 위치로 캐릭터가 이동한다.");


	// #3 소용돌이 형태의 탄환 발사
	
	block[64] = new Block("탄환 생성", "캐릭터 위치를 확인한 후 탄환을 생성한다.");
	block[65] = new Block("탄환 이동", "탄환이 정해진 속도, 방향으로 이동한다.");
	block[66] = new Block("탄환 재생성", "이전 탄환과 다른 각도값을 가지는 탄환을 생성한다.");
	block[67] = new Block("탄환 이동", "탄환이 재설정된 각도값에 따라 이동한다.");

	block[68] = new Block("탄환 재생성", "이전과 다른 속도를 가지는 탄환을 생성한다.");
	block[69] = new Block("탄환 재생성", "이전에 생성된 탄환보다 재생성 되는 기간을 변경하며 탄환을 생성한다.");
	block[70] = new Block("탄환 삭제", "생성되야 하는 모양과 다른 탄환은 삭제한다.");
	block[71] = new Block("탄환 이동", "탄환이 이동하면서 이동속도를 점점 빠르게 한다.");


	// #4 여러 방향으로 발사되는 소용돌이 형태의 탄환 발사
	
	block[72] = new Block("탄환 생성", "탄환을 캐릭터의 위치에 생성한다.");
	block[73] = new Block("소용돌이 탄환 발사", "소용돌이 탄환을 발사한다.");
	block[74] = new Block("탄환 재생성", "탄환의 속도 옵션을 변경한 탄환을 생성한다.");
	block[75] = new Block("소용돌이 탄환 재발사", "소용돌이 탄환을 발사한다.");

	block[76] = new Block("플레이어 이동", "플레이어가 소용돌이 형태로 이동한다.");
	block[77] = new Block("탄환 시간 조절", "탄환이 발사된 이후 탄환 발사 시간을 조절하여 탄막의 간격을 조절한다.");
	block[78] = new Block("화면 진동", "탄환이 생성될 때 화면이 살짝 흔들린다.");
	block[79] = new Block("", "");

	
	// #5 여러 방향으로 동시에 탄 발사하기

	block[80] = new Block("현재 나갈 탄환 수 확인", "캐릭터의 탄 수 옵션이 2개 이상인지 확인한다.");
	block[81] = new Block("타입 확인", "현재 생성될 탄환의 타입 확인");
	block[82] = new Block("탄환 생성", "설정된 탄환간의 각도, 발사 범위의 넓이, 탄막의 수 값을 가지는 탄환을 생성한다.");
	block[83] = new Block("탄환 이동", "각 탄환이 가지는 설정의 값대로 이동하는 탄환을 이동한다.");
	
	block[84] = new Block("캐릭터 추가 생성", "캐릭터를 추가로 생성한다.");
	block[85] = new Block("탄환 발사", "생성되어 있는 기체가 모두 동시에 탄환을 발사한다.");
	block[86] = new Block("적 조준", "상대편 캐릭터의 위치좌표를 받는다.");
	block[87] = new Block("탄환 제거", "동시에 발사된 탄환중 하나가 제거되면 다른 탄환도 모두 같이 제거한다.");


	// #6 랜덤 방향으로 탄 발사하기

	block[88] = new Block("캐릭터 위치 확인", "현재 캐릭터의 위치를 확인한다.");
	block[89] = new Block("탄환 생성", "탄막의 각도, 속도, 개수 모두 랜덤 값으로 플레이어 위치에 생성된다.");
	block[90] = new Block("탄환 이동", "설정된 옵션대로 탄환이 개별적으로 이동한다.");
	block[91] = new Block("탄환 재생성", "탄환의 각도, 속도, 개수 모두 랜덤으로 재생성한다.");
	
	block[92] = new Block("탄환 재생성", "탄환의 각도 속도, 개수의 값을 늘린 후에 재생성한다.");
	block[93] = new Block("화면 진동", "탄이 발사될 때 화면이 흔들리도록 한다.");
	block[94] = new Block("탄환 속도 변경", "발사된 탄환은 속도가 점점 빨라진다.");
	block[95] = new Block("탄환 방향 바꾸기", "발사된 탄환은 이동 중에 랜덤으로 방향을 바꾼다.");
	

	// #7 서로 다른 패턴을 가진 탄을 동시에 발사하기

	block[96] = new Block("패턴1 캐릭터 생성", "개발자가 지정한 패턴1의 탄막을 생성하는 캐릭터를 생성한다");
	block[97] = new Block("패턴2 캐릭터 생성", "개발자가 지정한 패턴2의 탄막을 생성하는 캐릭터를 생성한다");
	block[98] = new Block("패턴1과 패턴2의 캐릭터를 합치기", "패턴1의 캐릭터와 패턴2의 캐릭터를 같은 위치에 두고 한 캐릭터는 이미지를 생성하지 않는다.");
	block[99] = new Block("탄환 발사", "패턴1의 캐릭터와 패턴2의 캐릭터가 동시에 탄환을 생성한다.");

	block[100] = new Block("탄막제거", "화면을 넘어가는 탄막은 제거한다");
	block[101] = new Block("패턴1 캐릭터 2개를 합치기", "패턴1의 캐릭터를 2개 생성하여 같은 위치에 생성한다.");
	block[102] = new Block("패턴2 캐릭터 2개를 합치기", "패턴2의 캐릭터를 2개 생성하여 같은 위치에 생성한다.");
	block[103] = new Block("탄환 발사", "패턴1의 캐릭터가 탄환을 생성하고 나서 패턴2의 캐릭터가 탄환을 생성한다.");


	// #8 유도탄
	
	block[104] = new Block("최대 각도, 속도 설정", "캐릭터의 탄막의 최대 각도와 최대 속도를 설정한 채 생성한다.");
	block[105] = new Block("플레이어 위치 확인", "발사된 탄막은 플레이어의 위치를 지속적으로 받는다.");
	block[106] = new Block("탄막 이동", "탄막이 플레이어가 있는 방향으로 이동한다.");
	block[107] = new Block("탄막의 이동 제한", "받는 플레이어의 위치로 이동하지만, 설정된 최대 각도, 속도보다 크거나 빠르지 않게 이동한다.");

	block[108] = new Block("탄막 이동", "탄막이 플레이어가 있는 위치로 이동한다.");
	block[109] = new Block("충돌", "플레이어와 탄막이 충돌범위가 겹친다.");
	block[110] = new Block("탄막 속도 감소", "플레이어와 가까워지면 탄환의 속도를 감소시킨다.");
	block[111] = new Block("탄막 삭제", "화면을 넘어가면 탄막을 삭제한다.");


	// #9 충돌판정 - 탄막
	
	block[112] = new Block("충돌범위 생성", "탄막과 캐릭터는 개개인의 충돌범위를 가진다.");
	block[113] = new Block("충돌", "탄막과 캐릭터의 충돌 범위가 겹친다.");
	block[114] = new Block("HP 감소", "충돌한 캐릭터의 HP는 감소한다.");
	block[115] = new Block("탄환 삭제", "충돌한 탄환은 삭제된다.");

	block[116] = new Block("탄막 삭제", "화면을 넘어간 탄환은 삭제한다.");
	block[117] = new Block("캐릭터 폭발", "HP가 0이된 캐릭터는 광범위한 피해를 입힌다.");
	block[118] = new Block("탄막 충돌", "각 캐릭터가 발사한 탄환끼리 충돌할 경우 두 탄환을 삭제한다.");
	block[119] = new Block("캐릭터 삭제", "현재 화면상에 존재하는 캐릭터를 삭제한다.");


	// #10 충돌판정 - 적기와 플레이어

	block[120] = new Block("충돌범위 생성", "각 캐릭터는 개개별로 충돌범위를 가진다.");
	block[121] = new Block("충돌", "서로 적대하는 캐릭터간의 충돌범위가 겹친다.");
	block[122] = new Block("HP 감소", "충돌한 캐릭터는 개개인의 HP가 감소한다.");
	block[123] = new Block("캐릭터 HP 확인", "HP가 0이 된 캐릭터는 삭제하며, 플레이어의 캐릭터가 HP 0이되면 게임오버된다.");

	block[124] = new Block("게임오버", "캐릭터의 HP가 0이되었을 경우 게임을 종료시킨다.");
	block[125] = new Block("아이템 초기화", "캐릭터가 가지고 있던 아이템을 초기화한다.");
	block[126] = new Block("캐릭터 이동", "캐릭터끼리 충돌하면 충돌하기 이전 위치로 이동한다.");
	block[127] = new Block("탄환 삭제", "게임 화면 내에 생성되어 있는 탄환을 모두 삭제한다.");

}


BlockManager::~BlockManager()
{
}

Block* BlockManager::getBlock(int blockNum)
{
	return block[blockNum];
}
